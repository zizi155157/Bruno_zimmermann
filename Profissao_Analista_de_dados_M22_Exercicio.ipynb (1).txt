{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KJqp9AANOCtf"
      },
      "source": [
        "<img src=\"https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png\" alt=\"ebac-logo\">\n",
        "\n",
        "---\n",
        "\n",
        "# **Módulo** | Análise de Dados: Fundamentos de Aprendizado de Máquina\n",
        "Caderno de **Exercícios**<br>\n",
        "Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d9jDtUbDOE1-"
      },
      "source": [
        "# **Tópicos**\n",
        "\n",
        "<ol type=\"1\">\n",
        "  <li>Teoria;</li>\n",
        "  <li>Atributos categóricos;</li>\n",
        "  <li>Atributos numéricos;</li>\n",
        "  <li>Dados faltantes.</li>\n",
        "</ol>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SmoHgt-lwkpD"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GABI6OW8OfQ2"
      },
      "source": [
        "# **Exercícios**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kzRDceCvkFj2"
      },
      "source": [
        "## 1\\. Pinguins"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WCQi-s0Hpd5V"
      },
      "source": [
        "Neste exercício, vamos utilizar uma base de dados com informações sobre penguins. A idéia é preparar a base de dados para prever a espécie do penguin (variável resposta) baseado em suas características físicas e geográficas (variáveis preditivas)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lblH8kIXzPZZ"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VR3UdrrQgJ4K"
      },
      "source": [
        "data = sns.load_dataset('penguins')"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "znk9Z9TLgTGP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "a8fe25f0-9f4a-4cb7-ea18-40177abd60c5"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n",
              "0  Adelie  Torgersen            39.1           18.7              181.0   \n",
              "1  Adelie  Torgersen            39.5           17.4              186.0   \n",
              "2  Adelie  Torgersen            40.3           18.0              195.0   \n",
              "3  Adelie  Torgersen             NaN            NaN                NaN   \n",
              "4  Adelie  Torgersen            36.7           19.3              193.0   \n",
              "\n",
              "   body_mass_g     sex  \n",
              "0       3750.0    Male  \n",
              "1       3800.0  Female  \n",
              "2       3250.0  Female  \n",
              "3          NaN     NaN  \n",
              "4       3450.0  Female  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90f9a2b9-a2ca-4052-99b4-6c4c4915276c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>species</th>\n",
              "      <th>island</th>\n",
              "      <th>bill_length_mm</th>\n",
              "      <th>bill_depth_mm</th>\n",
              "      <th>flipper_length_mm</th>\n",
              "      <th>body_mass_g</th>\n",
              "      <th>sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.1</td>\n",
              "      <td>18.7</td>\n",
              "      <td>181.0</td>\n",
              "      <td>3750.0</td>\n",
              "      <td>Male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>39.5</td>\n",
              "      <td>17.4</td>\n",
              "      <td>186.0</td>\n",
              "      <td>3800.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>40.3</td>\n",
              "      <td>18.0</td>\n",
              "      <td>195.0</td>\n",
              "      <td>3250.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Adelie</td>\n",
              "      <td>Torgersen</td>\n",
              "      <td>36.7</td>\n",
              "      <td>19.3</td>\n",
              "      <td>193.0</td>\n",
              "      <td>3450.0</td>\n",
              "      <td>Female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90f9a2b9-a2ca-4052-99b4-6c4c4915276c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-90f9a2b9-a2ca-4052-99b4-6c4c4915276c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-90f9a2b9-a2ca-4052-99b4-6c4c4915276c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7c9bc435-ea09-4b65-9384-9f323ad04695\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c9bc435-ea09-4b65-9384-9f323ad04695')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7c9bc435-ea09-4b65-9384-9f323ad04695 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 344,\n  \"fields\": [\n    {\n      \"column\": \"species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Adelie\",\n          \"Chinstrap\",\n          \"Gentoo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"island\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Torgersen\",\n          \"Biscoe\",\n          \"Dream\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.4595837139265315,\n        \"min\": 32.1,\n        \"max\": 59.6,\n        \"num_unique_values\": 164,\n        \"samples\": [\n          48.2,\n          49.8,\n          45.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bill_depth_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9747931568167816,\n        \"min\": 13.1,\n        \"max\": 21.5,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          16.9,\n          18.7,\n          18.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"flipper_length_mm\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.061713679356888,\n        \"min\": 172.0,\n        \"max\": 231.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          201.0,\n          180.0,\n          212.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"body_mass_g\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 801.9545356980956,\n        \"min\": 2700.0,\n        \"max\": 6300.0,\n        \"num_unique_values\": 94,\n        \"samples\": [\n          4350.0,\n          4150.0,\n          3525.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HrTLgE0tki6P"
      },
      "source": [
        "### **1.1. Valores nulos**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8JmRsG6K8SPd"
      },
      "source": [
        "A base de dados possui valores faltantes, utilize os conceitos da aula para trata-los."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8kyhQS748SPf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "72c75e1d-b23c-4f27-86e0-59a1220d8279"
      },
      "source": [
        "# resposta da questão 1.1\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "# Load the penguins dataset directly from seaborn\n",
        "data = sns.load_dataset('penguins')\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "print(data.head())\n",
        "\n",
        "# Display general information about the DataFrame\n",
        "print(data.info())\n"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  species     island  bill_length_mm  bill_depth_mm  flipper_length_mm  \\\n",
            "0  Adelie  Torgersen            39.1           18.7              181.0   \n",
            "1  Adelie  Torgersen            39.5           17.4              186.0   \n",
            "2  Adelie  Torgersen            40.3           18.0              195.0   \n",
            "3  Adelie  Torgersen             NaN            NaN                NaN   \n",
            "4  Adelie  Torgersen            36.7           19.3              193.0   \n",
            "\n",
            "   body_mass_g     sex  \n",
            "0       3750.0    Male  \n",
            "1       3800.0  Female  \n",
            "2       3250.0  Female  \n",
            "3          NaN     NaN  \n",
            "4       3450.0  Female  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 344 entries, 0 to 343\n",
            "Data columns (total 7 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   species            344 non-null    object \n",
            " 1   island             344 non-null    object \n",
            " 2   bill_length_mm     342 non-null    float64\n",
            " 3   bill_depth_mm      342 non-null    float64\n",
            " 4   flipper_length_mm  342 non-null    float64\n",
            " 5   body_mass_g        342 non-null    float64\n",
            " 6   sex                333 non-null    object \n",
            "dtypes: float64(4), object(3)\n",
            "memory usage: 18.9+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "\n",
        "# URL da página\n",
        "url = 'https://brasilescola.uol.com.br/animais/pinguins.htm'\n",
        "\n",
        "# Fazer a solicitação HTTP para a página\n",
        "response = requests.get(url)\n",
        "soup = BeautifulSoup(response.text, 'html.parser')\n",
        "\n",
        "# Exemplo: Extrair todos os parágrafos da página\n",
        "paragraphs = soup.find_all('p')\n",
        "\n",
        "# Exibir os primeiros parágrafos extraídos\n",
        "for p in paragraphs[:5]:\n",
        "    print(p.get_text())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tzn2jBghmuS5",
        "outputId": "4b814112-112e-4206-c620-2cb12e7a81ec"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pinguins são aves encontradas desde o continente Antártico até as ilhas Galápagos. Geralmente apresentam coloração preta e branca e se destacam por sua capacidade de natação.\n",
            "PUBLICIDADE\n",
            "O pinguim é uma ave pertencente à ordem Sphenisciformes, distribuídas do continente Antártico até as ilhas Galápagos. Atualmente são descritas 18 espécies de pinguins, sendo todas elas incapazes de voar, mas excelentes nadadoras. Esses animais apresentam como adaptações ao nado a ausência de ossos pneumáticos, corpo com formato hidrodinâmico, presença de membranas interdigitais nas patas e asas adaptadas para a natação.\n",
            "Leia mais: Adaptações das aves ao voo, entre as principais estão: presença de ossos ocos e penas\n",
            " Tópicos deste artigo1 - Características gerais dos pinguins2 - Espécies de pinguins\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import pandas as pd\n",
        "\n",
        "# URL da página da Wikipedia\n",
        "url = 'https://pt.wikipedia.org/wiki/Pinguim#Esp%C3%A9cies'\n",
        "\n",
        "# Fazer a solicitação HTTP para a página\n",
        "response = requests.get(url)\n",
        "soup = BeautifulSoup(response.text, 'html.parser')\n",
        "\n",
        "# Encontrar a tabela com as espécies de pinguins\n",
        "# A tabela geralmente está dentro de uma tag <table>. Pode ser necessário ajustar o índice [0] se houver múltiplas tabelas.\n",
        "table = soup.find('table', {'class': 'wikitable'})\n",
        "\n",
        "# Ler a tabela usando pandas\n",
        "df = pd.read_html(str(table))[0]\n",
        "\n",
        "# Exibir as primeiras linhas do dataframe\n",
        "print(\"Primeiras linhas do dataframe:\")\n",
        "print(df.head())\n",
        "\n",
        "# Exibir informações gerais sobre o dataframe\n",
        "print(\"\\nInformações sobre o dataframe:\")\n",
        "print(df.info())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lr26ftPlolP7",
        "outputId": "69feb633-134d-40e4-a90c-8de6211df191"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Primeiras linhas do dataframe:\n",
            "                                                   0                       1  \\\n",
            "0                                           Espécies   Status de conservação   \n",
            "1           Pinguim Imperador (Aptenodytes forsteri)     Quase ameaçada (NT)   \n",
            "2                Pinguim Adelie (Pygoscelis adeliae)  Pouco preocupante (LC)   \n",
            "3  Southern Rockhopper Penguin (Eudyptes chrysocome)         Vulnerável (VU)   \n",
            "4         Fiordland Penguin (Eudyptes pachyrhynchus)         Vulnerável (VU)   \n",
            "\n",
            "                                                   2  \\\n",
            "0                                 Principais Ameaças   \n",
            "1  1 Perturbação humana; 2 Mudança climática: per...   \n",
            "2  1 Perturbação humana; 2 Mudança climática: per...   \n",
            "3  1 Perturbação humana; 2 Mudança climática: per...   \n",
            "4  1 Perturbação humana; 2 Mudança climática: per...   \n",
            "\n",
            "                                                   3  \\\n",
            "0                                       Distribuição   \n",
            "1  Na época reprodutiva: Antártida. Quando fora d...   \n",
            "2  Na época reprodutiva: Antarctica, Georgia do S...   \n",
            "3  Na época reprodutiva: nas ilhas e costas na po...   \n",
            "4  Na época reprodutiva: na Nova Zelândia, ilhas ...   \n",
            "\n",
            "                                                   4  \n",
            "0         Ações de conservação (presente ou ausente)  \n",
            "1                                            Ausente  \n",
            "2  Presente: é uma das espécies de pinguins mais ...  \n",
            "3  Presente: há monitoramento das espécies, áreas...  \n",
            "4  Presente: há ações de recuperação em andamento...  \n",
            "\n",
            "Informações sobre o dataframe:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7 entries, 0 to 6\n",
            "Data columns (total 5 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   0       7 non-null      object\n",
            " 1   1       7 non-null      object\n",
            " 2   2       7 non-null      object\n",
            " 3   3       7 non-null      object\n",
            " 4   4       7 non-null      object\n",
            "dtypes: object(5)\n",
            "memory usage: 408.0+ bytes\n",
            "None\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-0bf034bd3354>:17: FutureWarning: Passing literal html to 'read_html' is deprecated and will be removed in a future version. To read from a literal string, wrap it in a 'StringIO' object.\n",
            "  df = pd.read_html(str(table))[0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9YtwYCuk8SPU"
      },
      "source": [
        "### **1.2. Variáveis numéricas**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7tIjNOs8q6aZ"
      },
      "source": [
        "Identifique as variáveis numéricas e crie uma nova coluna **padronizando** seus valores. A nova coluna deve ter o mesmo nome da coluna original acrescidade de \"*_std*\"."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QchO_rKR8tyx"
      },
      "source": [
        "> **Nota**: Você não deve tratar a variável resposta."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IwTTh4VKkdKN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c0b79aa-480b-447e-f853-56de03f59ab5"
      },
      "source": [
        "# resposta da questão 1.2\n",
        "\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Exemplo de DataFrame. Substitua pelo seu DataFrame real.\n",
        "data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Adelie', 'Adelie', 'Chinstrap', 'Gentoo'],\n",
        "    'island': ['Torgersen', 'Torgersen', 'Torgersen', 'Dream', 'Biscoe'],\n",
        "    'bill_length_mm': [39.1, 39.5, 40.3, 38.5, 48.5],\n",
        "    'bill_depth_mm': [18.7, 17.4, 18.0, 18.0, 14.5],\n",
        "    'flipper_length_mm': [181.0, 186.0, 195.0, 193.0, 215.0],\n",
        "    'body_mass_g': [3750.0, 3800.0, 3250.0, 3450.0, 5000.0],\n",
        "    'sex': ['Male', 'Female', 'Female', 'Female', 'Male']\n",
        "})\n",
        "\n",
        "# Identificar variáveis numéricas\n",
        "num_features = data.select_dtypes(include=['float64', 'int64']).columns\n",
        "\n",
        "# Criar uma cópia do DataFrame para evitar alterações no original\n",
        "data_std = data.copy()\n",
        "\n",
        "# Padronizar variáveis numéricas\n",
        "scaler = StandardScaler()\n",
        "data_std[num_features] = scaler.fit_transform(data[num_features])\n",
        "\n",
        "# Renomear as colunas para incluir o sufixo '_std'\n",
        "data_std.rename(columns=lambda x: x + '_std' if x in num_features else x, inplace=True)\n",
        "\n",
        "# Exibir as primeiras linhas do DataFrame com as colunas padronizadas\n",
        "print(\"DataFrame com colunas padronizadas:\")\n",
        "print(data_std.head())\n"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame com colunas padronizadas:\n",
            "     species     island  bill_length_mm_std  bill_depth_mm_std  \\\n",
            "0     Adelie  Torgersen           -0.561187           0.939493   \n",
            "1     Adelie  Torgersen           -0.453267           0.054463   \n",
            "2     Adelie  Torgersen           -0.237425           0.462939   \n",
            "3  Chinstrap      Dream           -0.723068           0.462939   \n",
            "4     Gentoo     Biscoe            1.974948          -1.919834   \n",
            "\n",
            "   flipper_length_mm_std  body_mass_g_std     sex  \n",
            "0              -1.118034        -0.164177    Male  \n",
            "1              -0.688021        -0.082089  Female  \n",
            "2               0.086003        -0.985064  Female  \n",
            "3              -0.086003        -0.656709  Female  \n",
            "4               1.806055         1.888039    Male  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TTh7w8rgkznY"
      },
      "source": [
        "### **1.3. Variáveis categóricas**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "clBerimQs2PY"
      },
      "source": [
        "Identifique as variáveis categóricas nominais e ordinais, crie uma nova coluna aplicando a técnica correta de conversão a seus valores. A nova coluna deve ter o mesmo nome da coluna original acrescidade de \"*_nom*\" ou \"*_ord*\"."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BqpAVY109BWA"
      },
      "source": [
        "> **Nota**: Você não deve tratar a variável resposta."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fohdVuLzkdKP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a26f8b9d-9029-4190-81ae-a0e4e6aa8e90"
      },
      "source": [
        "# resposta da questão 1.3\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n",
        "\n",
        "# Exemplo de DataFrame. Substitua pelo seu DataFrame real.\n",
        "data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Adelie', 'Adelie', 'Chinstrap', 'Gentoo'],\n",
        "    'island': ['Torgersen', 'Torgersen', 'Torgersen', 'Dream', 'Biscoe'],\n",
        "    'bill_length_mm': [39.1, 39.5, 40.3, 38.5, 48.5],\n",
        "    'bill_depth_mm': [18.7, 17.4, 18.0, 18.0, 14.5],\n",
        "    'flipper_length_mm': [181.0, 186.0, 195.0, 193.0, 215.0],\n",
        "    'body_mass_g': [3750.0, 3800.0, 3250.0, 3450.0, 5000.0],\n",
        "    'sex': ['Male', 'Female', 'Female', 'Female', 'Male']\n",
        "})\n",
        "\n",
        "# Identificar variáveis categóricas\n",
        "cat_features = data.select_dtypes(include=['object']).columns\n",
        "\n",
        "# Criar uma cópia do DataFrame para evitar alterações no original\n",
        "data_cat = data.copy()\n",
        "\n",
        "# Identificar e tratar variáveis categóricas nominais\n",
        "nominal_features = ['species', 'island']\n",
        "encoder_nom = OneHotEncoder(sparse=False, drop='first')  # drop='first' para evitar a multicolinearidade\n",
        "encoded_nom = encoder_nom.fit_transform(data[nominal_features])\n",
        "\n",
        "# Criar DataFrame com as colunas codificadas\n",
        "encoded_nom_df = pd.DataFrame(encoded_nom, columns=encoder_nom.get_feature_names_out(nominal_features))\n",
        "\n",
        "# Adicionar as colunas codificadas ao DataFrame original\n",
        "data_cat = pd.concat([data_cat, encoded_nom_df], axis=1)\n",
        "data_cat.drop(columns=nominal_features, inplace=True)  # Remover colunas originais\n",
        "\n",
        "# Identificar e tratar variáveis categóricas ordinais (se houvesse)\n",
        "# Exemplo hipotético de variável ordinal\n",
        "# ordinal_features = ['ordinal_column']\n",
        "# encoder_ord = LabelEncoder()\n",
        "# data_cat[ordinal_features] = data[ordinal_features].apply(encoder_ord.fit_transform)\n",
        "\n",
        "# Renomear as colunas para incluir o sufixo '_nom' ou '_ord'\n",
        "# Note que neste exemplo estamos criando novas colunas e removendo as originais, então a renomeação das originais não é necessária.\n",
        "# Se desejado manter as originais com sufixos, você pode adaptar o código conforme necessário.\n",
        "\n",
        "# Exibir as primeiras linhas do DataFrame com as colunas categóricas convertidas\n",
        "print(\"DataFrame com colunas categóricas convertidas:\")\n",
        "print(data_cat.head())\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame com colunas categóricas convertidas:\n",
            "   bill_length_mm  bill_depth_mm  flipper_length_mm  body_mass_g     sex  \\\n",
            "0            39.1           18.7              181.0       3750.0    Male   \n",
            "1            39.5           17.4              186.0       3800.0  Female   \n",
            "2            40.3           18.0              195.0       3250.0  Female   \n",
            "3            38.5           18.0              193.0       3450.0  Female   \n",
            "4            48.5           14.5              215.0       5000.0    Male   \n",
            "\n",
            "   species_Chinstrap  species_Gentoo  island_Dream  island_Torgersen  \n",
            "0                0.0             0.0           0.0               1.0  \n",
            "1                0.0             0.0           0.0               1.0  \n",
            "2                0.0             0.0           0.0               1.0  \n",
            "3                1.0             0.0           1.0               0.0  \n",
            "4                0.0             1.0           0.0               0.0  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:975: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AvkcQD9E9DGE"
      },
      "source": [
        "### **1.4. Limpeza**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D03kCy8-9DGE"
      },
      "source": [
        "Descarte as colunas originais e mantenha apenas a variável resposta e as variáveis preditivas com o sufixo *_std*\", *_nom*\" e \"*_ord*\"."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TuEOO6009DGE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "16bea8a4-721d-4be2-c7a4-14e82cb9a8f1"
      },
      "source": [
        "# resposta da questão 1.4\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "\n",
        "# Exemplo de DataFrame. Substitua pelo seu DataFrame real.\n",
        "data = pd.DataFrame({\n",
        "    'species': ['Adelie', 'Adelie', 'Adelie', 'Chinstrap', 'Gentoo'],\n",
        "    'island': ['Torgersen', 'Torgersen', 'Torgersen', 'Dream', 'Biscoe'],\n",
        "    'bill_length_mm': [39.1, 39.5, 40.3, 38.5, 48.5],\n",
        "    'bill_depth_mm': [18.7, 17.4, 18.0, 18.0, 14.5],\n",
        "    'flipper_length_mm': [181.0, 186.0, 195.0, 193.0, 215.0],\n",
        "    'body_mass_g': [3750.0, 3800.0, 3250.0, 3450.0, 5000.0],\n",
        "    'sex': ['Male', 'Female', 'Female', 'Female', 'Male']\n",
        "})\n",
        "\n",
        "# Variável resposta\n",
        "response_variable = 'species'\n",
        "\n",
        "# Identificar variáveis numéricas e categóricas\n",
        "num_features = data.select_dtypes(include=['float64', 'int64']).columns\n",
        "cat_features = data.select_dtypes(include=['object']).columns\n",
        "\n",
        "# Criar uma cópia do DataFrame para evitar alterações no original\n",
        "data_clean = data.copy()\n",
        "\n",
        "# Padronizar variáveis numéricas\n",
        "scaler = StandardScaler()\n",
        "data_clean[num_features] = scaler.fit_transform(data[num_features])\n",
        "\n",
        "# Renomear colunas numéricas para incluir o sufixo '_std'\n",
        "data_clean.rename(columns=lambda x: x + '_std' if x in num_features else x, inplace=True)\n",
        "\n",
        "# Identificar e tratar variáveis categóricas nominais\n",
        "nominal_features = ['island'] # Removed 'species' as it's the response variable\n",
        "encoder_nom = OneHotEncoder(sparse=False, drop='first')\n",
        "encoded_nom = encoder_nom.fit_transform(data[nominal_features])\n",
        "\n",
        "# Criar DataFrame com as colunas codificadas\n",
        "encoded_nom_df = pd.DataFrame(encoded_nom, columns=encoder_nom.get_feature_names_out(nominal_features))\n",
        "\n",
        "# Adicionar as colunas codificadas ao DataFrame original\n",
        "data_clean = pd.concat([data_clean, encoded_nom_df], axis=1)\n",
        "data_clean.drop(columns=nominal_features, inplace=True) # Only drop 'island'\n",
        "\n",
        "# Identificar e tratar variáveis categóricas ordinais (se houvesse)\n",
        "# ordinal_features = []  # Lista de variáveis ordinais, se houver\n",
        "\n",
        "# Excluir colunas não desejadas\n",
        "# 'species' is kept as it is the response variable\n",
        "columns_to_keep = [response_variable] + [col for col in data_clean.columns if col.endswith(('_std', '_nom', '_ord'))]\n",
        "data_clean = data_clean[columns_to_keep]\n",
        "\n",
        "# Exibir as primeiras linhas do DataFrame limpo\n",
        "print(\"DataFrame limpo:\")\n",
        "print(data_clean.head())\n"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DataFrame limpo:\n",
            "     species  bill_length_mm_std  bill_depth_mm_std  flipper_length_mm_std  \\\n",
            "0     Adelie           -0.561187           0.939493              -1.118034   \n",
            "1     Adelie           -0.453267           0.054463              -0.688021   \n",
            "2     Adelie           -0.237425           0.462939               0.086003   \n",
            "3  Chinstrap           -0.723068           0.462939              -0.086003   \n",
            "4     Gentoo            1.974948          -1.919834               1.806055   \n",
            "\n",
            "   body_mass_g_std  \n",
            "0        -0.164177  \n",
            "1        -0.082089  \n",
            "2        -0.985064  \n",
            "3        -0.656709  \n",
            "4         1.888039  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:975: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "waxn4B2UDHyl"
      },
      "source": [
        "---"
      ]
    }
  ]
}